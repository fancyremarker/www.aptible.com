---
:title: 'Vulnerability Scanning for your Dependencies: Why and How '
:slug: vulnerability-scanning-for-your-dependencies-why-and-how
:excerpt: Scanning for vulnerabilities in your dependencies is crucial to your application's
  security. Here's why (and how to do it).
:posted: 2017-05-22T17:00-04:00
:product: enclave
:type: blog post
:body: "In a world where application dependency graphs are deeper than ever, secure
  engineering means more than securing your own software: tracking vulnerabilities
  in your dependencies is just as important.\n\nWe’ve greatly simplified this process
  for Enclave users with a recent feature release: Docker Image Security Scans. This
  is a good opportunity to take a step back, review motivations and strategies for
  vulnerability management, and explain how this new feature fits in.\n\n## Why Dependency
  Vulnerability Management?\n\nPopular dependencies are _very_ juicy targets for malicious
  actors: a single vulnerability in a project like Rails can potentially affect thousands
  of apps, so attackers are likely to invest their resources in uncovering and automatically
  exploiting those.\n\nOne infamous (albeit old) example of this is [CVE-2013-0156][0]:
  an unauthenticated remote-code-execution (RCE) vulnerability in Rails that’s trivial
  to automatically scan for and exploit. Among others, [Metasploit provides modules
  to automatically identify and exploit it][1].\n\nAs an attacker, a vulnerability
  like CVE-2013-0156 is a gold mine. The exploit can be delivered via a simple HTTP
  request, so all an an attacker needed to do to compromise vulnerable Rails applications
  was send that request to as many public web servers as they could find (finding
  all of them is [much easier than it sounds][2]).\n\nIn other words: when it comes
  to vulnerabilities in third-party code, _you’re actively being targeted right now,
  even if no one has ever heard of you or your business_.\n\n## Strategies for Dependency
  Vulnerability Management\n\nNow that we’ve established that vulnerability management
  matters, the question that remains is: what can you do?\n\nModern apps depend on
  a number of dependencies that come from diverse sources ranging from OS packages
  to vendored dependencies. Fundamentally, there’s no one-size-fits-all approach to
  track of vulnerabilities that affect them.\n\nSo let’s divide and conquer: from
  a vulnerability management perspective, there’s a useful dichotomy between two categories
  of third-party software.\n\n  * On the one hand, there’s, third-party software you
  installed via a package manager\n\n  * And on the other hand, there’s third-party
  software you _didn’t_ install via a package manager.\n\nThe easiest dependencies
  to look after are those that you installed via a package manager, so let’s start
  with them.\n\n### Using a package manager? Leverage vulnerability databases\n\nPackage
  managers helpfully maintain a list of the packages you installed, which means you
  can easily compare the software you installed against a vulnerability database,
  and get a list of packages you need to update and unfixed vulnerabilities you need
  to mitigate.\n\nIdeally, you want to automate this process in order to be notified
  about new vulnerabilities when they come out, as opposed to hearing about them when
  you remember to check. Indeed, remember that when it comes to vulnerable third party
  dependencies, you’re actively being targeted right now, so speed is of the essence.\n\n####
  How does this work?\n\nThere’s a number of open-source projects and commercial products
  you can use for this type of analysis. A few popular options are Appcanary (which
  Aptible uses and integrates with), Gemnasium, and Snyk.\n\nThey often work like
  this:\n\n  * You extract the list of packages you installed from your package manager\n\n
  \ * You feed it to the analyzer\n\n  * The analyzer tells you about vulnerabilities
  (commercial products will also often notify you when new vulnerabilities come up
  in the future)\n\nThat simple!? Almost: you’re probably using _multiple package
  managers_ in your app, which means you may have to mix and match analyzers to cover
  everything. Indeed, for most modern apps, you’ll have at least two package managers:\n\n
  \ * **A system-level package manager**: if you’re using Ubuntu or Debian, this is
  dpkg, which you access via apt-get. If you’re using CentOS / Fedora, this is rpm,
  which you access via yum or dnf. If you’re using Alpine, it’s apk. Etc.\n\n  * **An
  app-level package manager**: if you’re writing a Ruby app, this is Bundler. If you’re
  writing a Node app, it’s NPM or Yarn. Etc.\n\nSo, what you need to do here is locate
  the list of installed packages for each of those, and submit it to a compatible
  vulnerability analyzer.\n\n#### New Enclave Feature: Docker Image Security Scans\n\nNow’s
  the right time to tell you about this new Enclave feature I mentioned earlier in
  this post.\n\nWhen you deploy your app on Enclave, we have access to its system
  image. Last week, we shipped a new feature that lets us extract the list of system
  packages installed in your app, and submit it to [Appcanary][3] for a security scan.\n\nThis
  can work in two different ways:\n\n  * **You can run a one-shot scan via the Enclave
  Dashboard.** This gives you an idea of what you need to fix right now, but it will
  not notify you when new vulnerabilities are discovered in packages you use**,**
  or if you install a new vulnerable package.\n\n  * **You can sign up for Appcanary
  and connect Enclave and Appcanary accounts.** Enclave will keep your Appcanary monitors
  in sync with your app deploys in Enclave, and in turn Appcanary will notify you
  whenever there’s a vulnerability you need to know about. This puts you in a great
  position from a security perspective, and will reassure security auditors.\n\n![How
  to run a vulnerability scan for your dependencies using Enclave.](//images.contentful.com/8djp5jlzqrnc/2E4oSyoJjywCSAyQmW8yYC/a70a777d1632bd13fe7c52fb257f4bd6/QmkRO6jbIN9e_woidolVIoNUQJfxeoP9ROP-yT35r70_.png)\n\nTo
  summarize: Enclave with Appcanary can now handle vulnerability monitoring for your
  system packages, and it’s really easy for you to set up!\n\nHowever, for app-level
  packages, you still have to do a little bit of legwork to find and integrate a vulnerability
  monitoring tool that works with your app. Note that Appcanary does support scanning
  Ruby and PHP dependencies, so you might be able to use them for app-level scanning
  too.\n\n## Is that it?\n\nNot quite: we still have to look at third-party code you
  _didn’t_ install via a package manager. Here are a few examples: software you compiled
  from source, binaries you downloaded directly from a vendor or project website,
  and even vendored dependencies.\n\nFor these, there is — unfortunately! — no silver
  bullet. Here’s what we recommend:\n\n  * When possible, try and minimize the amount
  of software you install this way.\n\n  * When you absolutely need to install software
  this way, subscribe to said software’s announcement channels to ensure you’re notified
  about new vulnerabilities. This may be a mailing list, a blog, or perhaps a GitHub
  issue tracker. When possible, review how security issues were handled in the past.\n\n_This
  time_, that about wraps it up! Or does it? Engineering is turtles all the way down,
  so even if you covered all your bases in terms of software _you_ installed, there’s
  still the underlying platform to account for.\n\nThat being said, unless you’re
  hosted on bare metal on your own hardware, this is largely out of your control.
  At this point, your best strategy is to choose a deployment platform you can trust
  (if you read this far, hopefully you’ll consider Enclave to be one).\n\n  [0]: https://groups.google.com/forum/#!topic/rubyonrails-security/61bkgvnSGTQ\n
  \ [1]: https://community.rapid7.com/community/metasploit/blog/2013/01/10/exploiting-ruby-on-rails-with-metasploit-cve-2013-0156\n
  \ [2]: http://www.securitynewspaper.com/2015/10/15/how-to-scan-whole-internet-3-7-billion-ip-addresses-in-few-minutes/\n
  \ [3]: https://appcanary.com/"
:author:
  :name: Thomas Orozco
  :slug: thomas
  :email: thomas@aptible.com
  :gravatar: https://s.gravatar.com/avatar/f532cf09084eb963bfc913867fff2258
